import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from scipy.cluster.hierarchy import linkage, dendrogram
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('sales_data_sample.csv', encoding='latin1')
df.head()

df

df.info()

df.describe()

df_drop  = ['ADDRESSLINE1', 'ADDRESSLINE2', 'POSTALCODE', 'CITY', 'TERRITORY', 'PHONE', 'STATE', 'CONTACTFIRSTNAME', 'CONTACTLASTNAME', 'CUSTOMERNAME', 'ORDERNUMBER']
df = df.drop(df_drop, axis=1)

df.info()

for col in df.columns.values:
    print(df[col].value_counts())

df.drop(columns=['ORDERDATE','STATUS','MONTH_ID','QTR_ID','YEAR_ID'],inplace=True)
df.head()

from sklearn.preprocessing import LabelEncoder
def convert_categories(col):
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col].values)

categories = ['PRODUCTLINE','PRODUCTCODE','COUNTRY','DEALSIZE']
for col in categories:
    convert_categories(col)

X = df[['QUANTITYORDERED', 'SALES']]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

def kmeans_clustering(X):
    distortions = []
    for i in range(1, 15):
        kmeans = KMeans(n_clusters=i, init='k-means++', random_state=15)
        kmeans.fit(X)
        distortions.append(kmeans.inertia_)

    # Plotting the elbow method
    plt.figure(figsize=(8, 6))
    plt.plot(range(1, 15), distortions, marker='o')
    plt.title('Elbow Method for Optimal k')
    plt.xlabel('Number of Clusters (k)')
    plt.ylabel('Distortion')
    plt.show()

kmeans_clustering(X_scaled)





